<style lang="less">
@import 'style/weui.less';
// 定义全局样式
page{
  background-color: #F8F8F8;
  font-size: 16px;
}
.page__hd {
  padding: 40px;
}
.page__bd {
  padding-bottom: 40px;
}
.page__bd_spacing {
  padding-left: 15px;
  padding-right: 15px;
}
.page__ft{
  padding-bottom: 10px;
  text-align: center;
}
.page__title {
  text-align: left;
  font-size: 20px;
  font-weight: 400;
}
.page__desc {
  margin-top: 5px;
  color: #888888;
  text-align: left;
  font-size: 14px;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import api from '@/utils/api'

export default class extends wepy.app {
  config = {
    pages: [
      'pages/topics/index',
      'pages/topics/show',
      'pages/topics/userIndex',
      'pages/users/me',
      'pages/users/edit',
      'pages/users/show',
      'pages/auth/login',
      'pages/auth/register',
      'pages/replies/index',
      'pages/replies/userIndex',
      'pages/replies/create'
    ],
    window: {
      // 下拉 loading 的样式，仅支持 dark/light
      backgroundTextStyle: 'light',
      // 导航栏背景颜色
      navigationBarBackgroundColor: '#fff',
      // 导航栏标题文字内容
      navigationBarTitleText: 'WeChat',
      // 导航栏标题颜色，仅支持 black/white
      navigationBarTextStyle: 'black'
    },
    tabBar: {

      list: [{
        pagePath: 'pages/topics/index',
        text: '首页',
        iconPath: 'images/index.png',
        selectedIconPath: 'images/index_selected.png'
      }, {
        pagePath: 'pages/users/me',
        text: '我的',
        iconPath: 'images/user.png',
        selectedIconPath: 'images/user_selected.png'
      }],

      color: '#707070',
      selectedColor: '#00b5ad'

    }

  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
  }

  // 获取当前登录用户信息
  async getCurrentUser () {
    // 如果用户未登录
    if (!this.checkLogin()) {
      return null
    }

    // 从缓存中获取用户信息
    let user = wepy.getStorageSync('user')

    try {
      // 登录了但是缓存中没有，请求接口获取
      if (!user) {
        let userResponse = await api.authRequest('user')
        // 状态码为 200 表示请求成功
        if (userResponse.statusCode === 200) {
          user = userResponse.data
          wepy.setStorageSync('user', user)
        }
      }
    } catch (err) {
      console.log(err)
      wepy.showModal({
        title: '提示',
        content: '服务器错误，请联系管理员'
      })
    }

    return user
  }

  // 用户是否已经登录
  checkLogin () {
    return (wepy.getStorageSync('access_token') !== '')
  }

  // 定义一个全局变量 refreshPages
  globalData = {
    refreshPages: [],
    unreadCount: 0
  }

  // 当小程序初始化完成时，会触发 onLaunch 且全局只触发一次
  onLaunch() {
    // 小程序启动，调用一起获取未读消息数
    this.updateUnreadCount()
    // 每隔 60 秒，调用一起获取未读消息数
    setInterval(() => {
      this.updateUnreadCount()
    }, 60000)
  }

  // 获取未读消息数
  async updateUnreadCount() {
    // 未登录不需要请求
    if (!this.checkLogin()) {
      return
    }

    // 请求消息统计接口
    let notificationResponse = await api.authRequest('user/notifications/stats', false)

    //  请求成功，赋值全局变量 unreadCount
    if (notificationResponse.statusCode === 200) {
      this.globalData.unreadCount = notificationResponse.data.unread_count
    }
  }

  // 用来检测传入的页面路由是否在 refreshPages 数组中，
  // 如果存在，则将路由移除 refreshPages，并执行传入的回调方法
  checkRefreshPages (route, callback) {
    let refreshIndex = this.globalData.refreshPages.indexOf(route)
    if (refreshIndex === -1) {
      return
    }

    this.globalData.refreshPages.splice(refreshIndex, 1)
    callback && callback()
  }
}
</script>
